{"pageProps":{"blogData":{"id":"making-a-discord-bot-in-golang","readingTime":3,"contentHtml":"\n# Getting Started\n\nTo get started, we'll need to install Golang on our machine.\nI've already installed it on my machine, but if you haven't yet, refer to the [download page.](https://golang.org/dl/)\n\n# Setting up our project\n\nLet's create a new directory, and inside of it let's create a new file called `main.go`\n\nTo test if everything is working out, let's run a quick test\n\n```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n  fmt.Println(\"ðŸ‘‹ Hello from Golang!\")\n}\n```\n\nTo run this, go into your terminal and use `go run main.go`\n\nYou should see the output working!\n\n# Getting started with our bot\n\nSo, let's get started making our Discord bot. Let's import in some packages which we need:\n\n```\nimport (\n  \"fmt\"\n  \"os\"\n  \"os/signal\"\n  \"syscall\"\n\n  \"github.com/bwmarrin/discordgo\"\n)\n```\n\nSince we're using a GitHub library, we need to install it.\n\nTo install this (or any other Golang library from GitHub), simply run `go get github.com/bwmarrin/discordgo`\n\nNow, let's write some actual code. Let's start by creating a new session.\n\nBelow, you'll be need to put in your bot token which you can get from [Discord Developers.](https://discord.com/developers/)\n\n```go\nfunc main() {\n  dg, err := discordgo.New(\"Bot \", \"your discord token\")\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n}\n```\n\nNext, we need to open a websocket connection of our bot to Discord. We can do this by:\n\n```go\nerr = dg.Open()\nif err != nil {\n  fmt.Println(err)\n  return\n}\n```\n\nNow, let's add a small message letting us know our bot is online!\n\n```go\nfmt.Println(\"ðŸš€ Bot is online\")\n```\n\nLet's try to run our bot. You'll see that it instantly kills the process.\n\nTo stop this from happening, we need to add the following code below our online message.\n\n```go\nsc := make(chan os.Signal, 1)\nsignal.Notify(sc, syscall.SIGINT, syscall.SIGTERM, os.Interrupt, os.Kill)\n<-sc\n```\n\nNow, we need to add in a final line of code to make sure our Discord connection closes cleanly.\n\n```go\ndg.Close()\n```\n\nNow, if we run our bot, we can see that it's online and it works!\n\n# Creating commands\n\nNow that our bot is online, and it works, let's create some commands!\n\nLet's create a new function which will handle messages being created.\n\nInside of here, let's first of all make sure that the bot ignores it's own messages, to avoid all chaos.\n\n```go\nfunc messageCreate(session *discordgo.Session, message *discordgo.MessageCreate) {\n  if message.Author.ID == session.State.User.ID {\n    return\n  }\n}\n```\n\nNow, let's listen for messages. Let's create a simple ping command!\n\n```go\nif message.Content == \"!ping\" {\n  session.ChannelMessageSend(message.ChannelID, \"pong!\")\n}\n```\n\nNow, let's go back into init function and add make sure we can listen for events. We'll also need to specify an intent for messages.\n\n```go\ndg.AddHandler(messageCreate)\n\ndg.Identify.Intents = discordgo.IntentsGuildMessages\n```\n\nNow, if we run our bot again, we can see that everything should be working! If we type !ping, we should get a pong! response.\n\n# Challenge\n\nNow that we've setup a basic bot, I'd like to challenge you to add your bot token as an environment variable.\n\nYou can use any library, but I suggest [godotenv](https://github.com/joho/godotenv).\n","title":"Making a Discord Bot in Golang","date":"2021-05-10","formattedDate":"10 May, 2020","description":"Hey all! Hope you are having a wonderful day or night. Today, we will be going over how we can make a Discord Bot in Golang using the discord.go library!"}},"__N_SSG":true}