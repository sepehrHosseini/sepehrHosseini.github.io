{"pageProps":{"blogData":{"id":"translate-your-react-apps","readingTime":4,"contentHtml":"\n# üåè Internationalisation & It's Importance\n\nPeople's accessibility to the web has been a concern of many developers and companies. \n\nInternationalisation is the process of designing/developing our application to work well with users from different languages and regions.\n\nTo understand the importance of Internationalisation, around 989 million people from China have access to the internet. Meanwhile, [Less than 1% of China's population can speak English](https://en.wikipedia.org/wiki/List_of_countries_by_English-speaking_population). \n\nIn this post, we'll look at how we can easily translate our [Next.js] application into different languages. \n\n# üöÄ Project Setup\n\nFor this project, we'll use the following libraries:\n\n - [Next.js]\n - [next-i18next](https://next-i18next.com/)\n\n```bash\nnpx create-next-app intl --ts\n```\n\nThis will setup a new [Next.js] project which will use [TypeScript](https://typescriptlang.org) and [Yarn](https://yarnpkg.com/) for installing packages.\n\nNote: If you just want to use regular [JavaScript](https://developer.mozilla.org/en-US/docs/Web/JavaScript), remove the --ts option\n\nNow that we have our project, let's start the development server\n\n```bash\nyarn dev\n\nready - started server on 0.0.0.0:3000, url: http://localhost:3000\n```\n\nOur development server should now be running on [localhost](http://localhost:3000)\n\n# üó£Ô∏è Translating Our App\n\nNow that we have the basics setup and ready to go, we can begin translating our application. \n\nLet's install the [next-i18next](https://next-i18next.com/) library.\n\n```bash\nyarn add next-i18next\n```\n\nLet's open our pages/index.tsx file.\n\nAt the top, we can setup and use the useTranslation() hook provided by the package.\n\n```tsx\nimport { useTranslation } from 'next-i18next'\n```\n\nand inside our Home component:\n\n```\nconst { t } = useTranslation('common')\n```\n\nSince we're using Next.js, we'll also need to setup our application a bit differently.\n\nAt the top of the file, import the serverSideTranslations component:\n\n```tsx\nimport { serverSideTranslations } from 'next-i18next/serverSideTranslations'\n```\n\nNow, below the Home component, we need to use [getStaticProps](https://nextjs.org/docs/basic-features/data-fetching#getstaticprops-static-generation) to setup our translations.\n\n```tsx\nexport const getStaticProps = async ({ locale }) => ({\n  props: {\n    ...(await serverSideTranslations(locale, ['common'])),\n  },\n})\n```\n\nNow, let's open our pages/_app.tsx file and make sure we export it with translations. \n\n```tsx\nimport '../styles/globals.css'\nimport type { AppProps } from 'next/app'\n\nimport { appWithTranslation } from 'next-i18next'\n\nfunction MyApp({ Component, pageProps }: AppProps) {\n  return <Component {...pageProps} />\n}\n\nexport default appWithTranslation(MyApp)\n```\n\nAwesome! Let's now start to configure our translations with Next.js\n\nAt the root of the file, create a new file named next-i18next.config.js\n\nInside it, paste the following content. Replace the languages in the locale array with the language you wish to translate your app into.\n\nMy mother tongue is [Hindi](https://en.wikipedia.org/wiki/Hindi), so I'll be using it in this example to ensure accurate translations. \n\n```js\nmodule.exports = {\n  i18n: {\n    defaultLocale: 'en',\n    locales: ['en', 'hn'],\n  },\n}\n```\n\nNow, open your next.config.js file. If it's not created already, create it.\n\nSince I'm using [TypeScript](https://typescriptlang.org), it already created the file with some pre-configured settings. \n\n```js\nconst { i18n } = require('./next-i18next.config')\n\n/** @type {import('next').NextConfig} */\nmodule.exports = {\n  reactStrictMode: true,\n  i18n\n}\n```\n\nNext, we'll need to setup the lines we want to be translated. \n\nOpen up pages/index.tsx\n\nLet's take a look at the header which says \"Welcome to Next.js!\"\n\n```tsx\n<h1 className={styles.title}>\n  Welcome to <a href='https://nextjs.org'>Next.js!</a>\n</h1>\n```\n\nLet's replace this with the following code\n\n```tsx\n<h1 className={styles.title}>{t('header')}</h1>\n```\n\nNow, if you save it, you'll see instead of \"Welcome to Next.js!\" it shows \"header\", and that's because we haven't setup our translation yet.\n\nCreate a new file in the directory public/locales/en/common.json\n\n```json\n{\n  \"header\": \"Welcome to Next.js!\",\n}\n```\n\nNow, when we reload the page, we should see it say \"Welcome to Next.js!\"\n\nNow to translate it in our secondary language, let's create another new file in public/locales/hn/common.json\n\nThe closest translation to \"Welcome to Next.js!\" in [Hindi](https://en.wikipedia.org/wiki/Hindi) is \"Next.js ‡§Æ‡•á‡§Ç ‡§Ü‡§™‡§ï‡§æ ‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§π‡•à!\" (Using English words for English names).\n\n```json\n{\n  \"header\": \"Next.js ‡§Æ‡•á‡§Ç ‡§Ü‡§™‡§ï‡§æ ‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§π‡•à!\"\n}\n```\n\nNow, when we open up [localhost:3000/hn](http://localhost:3000/hn), we should see our app translated in [Hindi](https://en.wikipedia.org/wiki/Hindi)!\n\nThat's it for today. We took at look at how we can translate our Next.js apps in other languages with an example!\n\n[Next.js]: https://nextjs.org\n","title":"Translating Your Next.js Apps","date":"2021-09-17","formattedDate":"17 September, 2021","description":"If you intend your product to be used by people residing in non-English speaking countries, you will have to make your app multilingual. In this post, we will be looking at how you can quickly & easily translate your app into multiple languages."}},"__N_SSG":true}